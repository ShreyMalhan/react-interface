{"version":3,"sources":["components/AddAppointments.js","components/ListAppointments.js","components/SearchAppointments.js","components/App.js","reportWebVitals.js","index.js"],"names":["AddAppointments","state","petName","ownerName","aptDate","aptTime","aptNotes","handleChange","bind","handleSubmit","e","target","value","name","this","setState","preventDefault","temp","props","addAppointment","toggleForm","className","formDisplay","onClick","id","noValidate","onSubmit","htmlFor","readOnly","type","placeholder","onChange","rows","cols","Component","ListAppointments","appointmentNames","map","item","deleteAppointment","contentEditable","suppressContentEditableWarning","onBlur","updateInfo","innerText","aptId","date","parse","format","SearchAppointments","aria-label","searchApts","data-toggle","aria-haspopup","aria-expanded","orderBy","changeOrder","orderDir","href","role","App","appointments","queryText","lastIndex","fetch","then","response","json","result","apt","query","order","dir","unshift","fieldName","findIndex","without","filteredApts","sort","a","b","toLowerCase","filter","eachItem","includes","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"sRAoLeA,E,kDA9KX,aAAc,IAAD,8BACT,gBAGKC,MAAQ,CACTC,QAAS,GACTC,UAAW,GACXC,QAAS,GACTC,QAAS,GACTC,SAAU,IAGd,EAAKC,aAAe,EAAKA,aAAaC,KAAlB,gBACpB,EAAKC,aAAe,EAAKA,aAAaD,KAAlB,gBAbX,E,gDAiBb,SAAaE,GACT,IAAMC,EAASD,EAAEC,OACXC,EAAQD,EAAOC,MACfC,EAAOF,EAAOE,KAEpBC,KAAKC,SAAL,eACKF,EAAOD,M,0BAIhB,SAAaF,GACTA,EAAEM,iBACF,IAAMC,EAAO,CACTf,QAASY,KAAKb,MAAMC,QACpBC,UAAWW,KAAKb,MAAME,UACtBC,QAASU,KAAKb,MAAMG,QAAU,IAAMU,KAAKb,MAAMI,QAC/CC,SAAUQ,KAAKb,MAAMK,UAGL,MAAhBW,EAAKf,SAAoC,MAAlBe,EAAKd,WAAoC,MAAhBc,EAAKb,SACrDU,KAAKI,MAAMC,eAAeF,GAG9BH,KAAKC,SAAS,CACVb,QAAS,GACTC,UAAW,GACXC,QAAS,GACTC,QAAS,GACTC,SAAU,KAGdQ,KAAKI,MAAME,e,oBAIf,WACI,OACI,sBAAKC,UACD,yBACCP,KAAKI,MAAMI,YAAc,GAAK,mBAFnC,UAII,sBAAKD,UAAU,mDAAmDE,QAAST,KAAKI,MAAME,WAAtF,UACI,cAAC,IAAD,IADJ,sBAIA,qBAAKC,UAAU,YAAf,SACI,uBAAMG,GAAG,UAAUC,YAAU,EAACC,SAAYZ,KAAKL,aAA/C,UACI,sBAAKY,UAAU,sBAAf,UACI,uBACIA,UAAU,wCACVM,QAAQ,UACRC,UAAQ,EAHZ,sBAOA,qBAAKP,UAAU,YAAf,SACI,uBACIQ,KAAK,OACLR,UAAU,eACVR,KAAK,UACLiB,YAAY,aACZlB,MAASE,KAAKb,MAAMC,QACpB6B,SAAYjB,KAAKP,oBAK7B,sBAAKc,UAAU,sBAAf,UACI,uBACIA,UAAU,wCACVM,QAAQ,YAFZ,uBAMA,qBAAKN,UAAU,YAAf,SACI,uBACIQ,KAAK,OACLR,UAAU,eACVR,KAAK,YACLiB,YAAY,eACZlB,MAASE,KAAKb,MAAME,UACpB4B,SAAYjB,KAAKP,oBAK7B,sBAAKc,UAAU,sBAAf,UACI,uBACIA,UAAU,wCACVM,QAAQ,UAFZ,kBAMA,qBAAKN,UAAU,WAAf,SACI,uBACIQ,KAAK,OACLR,UAAU,eACVR,KAAK,UACLW,GAAG,UACHZ,MAASE,KAAKb,MAAMG,QACpB2B,SAAYjB,KAAKP,iBAGzB,uBACIc,UAAU,wCACVM,QAAQ,UAFZ,kBAMA,qBAAKN,UAAU,WAAf,SACI,uBACIQ,KAAK,OACLR,UAAU,eACVR,KAAK,UACLW,GAAG,UACHZ,MAASE,KAAKb,MAAMI,QACpB0B,SAAYjB,KAAKP,oBAK7B,sBAAKc,UAAU,sBAAf,UACI,uBAAOA,UAAU,yBAAyBM,QAAQ,WAAlD,wBAGA,qBAAKN,UAAU,YAAf,SACI,0BACIA,UAAU,eACVW,KAAK,IACLC,KAAK,KACLpB,KAAK,WACLW,GAAG,WACHM,YAAY,oBACZlB,MAASE,KAAKb,MAAMK,SACpByB,SAAYjB,KAAKP,oBAK7B,qBAAKc,UAAU,2BAAf,SACI,qBAAKA,UAAU,wBAAf,SACI,wBACIQ,KAAK,SACLR,UAAU,kCAFd,6C,GAhKFa,a,iBCyDfC,E,4JAvDX,WAAU,IAAD,OACL,OACI,qBAAKd,UAAU,kCAAf,SAEKP,KAAKI,MAAMkB,iBAAiBC,KAAI,SAAAC,GAAI,OACjC,cAD4C,CAC5C,OAAKjB,UAAU,0BAAf,UACI,qBAAKA,UAAU,OAAf,SACI,yBAAQA,UAAU,mCACVE,QAAW,kBAAM,EAAKL,MAAMqB,kBAAkBD,IADtD,UAGI,cAAC,IAAD,IAHJ,SAOJ,sBAAKjB,UAAU,sBAAf,UACI,sBAAKA,UAAU,kBAAf,UACI,sBACAA,UAAU,WACVmB,iBAAe,EACfC,gCAA8B,EAC9BC,OAAU,SAAAhC,GAAC,OAAI,EAAKQ,MAAMyB,WAAW,UAAWjC,EAAEC,OAAOiC,UAAWN,EAAKO,QAJzE,SAKEP,EAAKpC,UACP,sBAAMmB,UAAU,mBAAhB,SACI,cAAC,IAAD,CAEIyB,KAAQR,EAAKlC,QACb2C,MAAQ,mBACRC,OAAS,qBAKrB,sBAAK3B,UAAU,aAAf,UACI,sBAAMA,UAAU,aAAhB,qBACA,sBACAmB,iBAAe,EACfC,gCAA8B,EAC9BC,OAAU,SAAAhC,GAAC,OAAI,EAAKQ,MAAMyB,WAAW,YAAajC,EAAEC,OAAOiC,UAAWN,EAAKO,QAH3E,SAIEP,EAAKnC,eAEX,qBAAKkB,UAAU,YACfmB,iBAAe,EACfC,gCAA8B,EAC9BC,OAAU,SAAAhC,GAAC,OAAI,EAAKQ,MAAMyB,WAAW,WAAYjC,EAAEC,OAAOiC,UAAWN,EAAKO,QAH1E,SAIEP,EAAKhC,gBAvCiCgC,EAAKO,gB,GAP1CX,aC6EhBe,E,4JA7EX,WAAU,IAAD,OACL,OAEI,qBAAK5B,UAAU,sDAAf,SACI,qBAAKA,UAAU,WAAf,SACI,sBAAKA,UAAU,cAAf,UACI,uBACIG,GAAG,aACHK,KAAK,OACLR,UAAU,eACV6B,aAAW,sBACXnB,SAAY,SAAArB,GAAC,OAAI,EAAKQ,MAAMiC,WAAWzC,EAAEC,OAAOC,UAEpD,sBAAKS,UAAU,qBAAf,UACI,yBACIQ,KAAK,SACLR,UAAU,kCACV+B,cAAY,WACZC,gBAAc,OACdC,gBAAc,QALlB,sBAOa,sBAAMjC,UAAU,aAG7B,sBAAKA,UAAU,8CAAf,UACI,wBAAQA,UACJ,0BACwB,YAAvBP,KAAKI,MAAMqC,QAAwB,SAAW,IAEnDhC,QAAW,SAACb,GAAD,OAAO,EAAKQ,MAAMsC,YAAY,UAAW,EAAKtC,MAAMuC,WAC/DC,KAAK,IALL,sBAQA,wBAAQrC,UACJ,0BACwB,YAAvBP,KAAKI,MAAMqC,QAAwB,SAAW,IAEnDhC,QAAW,SAACb,GAAD,OAAO,EAAKQ,MAAMsC,YAAY,UAAW,EAAKtC,MAAMuC,WAC/DC,KAAK,IALL,kBAQA,wBAAQrC,UACJ,0BACwB,cAAvBP,KAAKI,MAAMqC,QAA0B,SAAW,IAErDhC,QAAW,SAACb,GAAD,OAAO,EAAKQ,MAAMsC,YAAY,YAAa,EAAKtC,MAAMuC,WACjEC,KAAK,IALL,mBAQA,qBAAKC,KAAK,YAAYtC,UAAU,qBAChC,wBAAQA,UACJ,0BACyB,QAAxBP,KAAKI,MAAMuC,SAAqB,SAAW,IAEhDlC,QAAW,SAACb,GAAD,OAAO,EAAKQ,MAAMsC,YAAY,EAAKtC,MAAMqC,QAAS,QAC7DG,KAAK,IALL,iBAQA,wBAAQrC,UACJ,0BACyB,SAAxBP,KAAKI,MAAMuC,SAAsB,SAAW,IAEjDlC,QAAW,SAACb,GAAD,OAAO,EAAKQ,MAAMsC,YAAY,EAAKtC,MAAMqC,QAAS,SAC7DG,KAAK,IALL,mC,GA5DCxB,a,QCuKlB0B,E,kDA5Jb,aAAe,IAAD,8BACZ,gBAMK3D,MAAQ,CAEX4D,aAAc,GACdN,QAAS,UACTE,SAAU,MACVnC,aAAa,EACbwC,UAAW,GACXC,UAAW,GAIb,EAAKxB,kBAAoB,EAAKA,kBAAkB/B,KAAvB,gBACzB,EAAKY,WAAa,EAAKA,WAAWZ,KAAhB,gBAClB,EAAKW,eAAiB,EAAKA,eAAeX,KAApB,gBACtB,EAAKgD,YAAc,EAAKA,YAAYhD,KAAjB,gBACnB,EAAK2C,WAAa,EAAKA,WAAW3C,KAAhB,gBAClB,EAAKmC,WAAa,EAAKA,WAAWnC,KAAhB,gBAvBN,E,qDA4Bd,WAAqB,IAAD,OAClBwD,MAAM,eACHC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GACJ,IAAMC,EAAMD,EAAO/B,KAAI,SAAAC,GAGrB,OAFAA,EAAKO,MAAQ,EAAK5C,MAAM8D,UACxB,EAAKhD,SAAS,CAAEgD,UAAW,EAAK9D,MAAM8D,UAAY,IAC3CzB,KAET,EAAKvB,SAAS,CAAE8C,aAAcQ,S,wBAKpC,SAAWC,GACTxD,KAAKC,SAAS,CAAC+C,UAAWQ,M,yBAI5B,SAAYC,EAAOC,GACjB1D,KAAKC,SAAS,CACZwC,QAASgB,EACTd,SAAUe,M,4BAKd,SAAeH,GACb,IAAMpD,EAAOH,KAAKb,MAAM4D,aACxBQ,EAAIxB,MAAQ/B,KAAKb,MAAM8D,UACvB9C,EAAKwD,QAAQJ,GAEbvD,KAAKC,SAAS,CACZ8C,aAAc5C,EACd8C,UAAWjD,KAAKb,MAAM8D,UAAY,M,wBAMtC,WACEjD,KAAKC,SAAS,CACZO,aAAcR,KAAKb,MAAMqB,gB,wBAI7B,SAAWoD,EAAW9D,EAAOY,GAC3B,IAAIP,EAAOH,KAAKb,MAAM4D,aAEtB5C,EADe0D,oBAAU7D,KAAKb,MAAM4D,aAAc,CAAChB,MAAOrB,KAC3CkD,GAAa9D,EAE5BE,KAAKC,SAAS,CACZ8C,aAAc5C,M,+BAKlB,SAAkBoD,GAChB,IAAIpD,EAAOH,KAAKb,MAAM4D,aACtB5C,EAAO2D,kBAAQ3D,EAAMoD,GACrBvD,KAAKC,SAAS,CAAC8C,aAAc5C,M,oBAG/B,WAAU,IAGJsD,EAHG,OAIHM,EAAe/D,KAAKb,MAAM4D,aAwB9B,OApBEU,EADyB,QAAxBzD,KAAKb,MAAMwD,SACJ,GAEC,EAIXoB,EAAeA,EAAaC,MAAK,SAACC,EAAEC,GAClC,OAAGD,EAAE,EAAK9E,MAAMsD,SAAS0B,cAAgBD,EAAE,EAAK/E,MAAMsD,SAAS0B,eACrD,EAAIV,EAEL,EAAIA,KAEZW,QAAO,SAAAC,GACR,OACEA,EAAQ,QAAYF,cAAcG,SAAS,EAAKnF,MAAM6D,UAAUmB,gBAChEE,EAAQ,UAAcF,cAAcG,SAAS,EAAKnF,MAAM6D,UAAUmB,gBAClEE,EAAQ,SAAaF,cAAcG,SAAS,EAAKnF,MAAM6D,UAAUmB,kBAKnE,sBAAM5D,UAAU,gBAAgBG,GAAG,aAAnC,SACE,qBAAKH,UAAU,YAAf,SACE,qBAAKA,UAAU,MAAf,SACE,qBAAKA,UAAU,qBAAf,SACE,sBAAKA,UAAU,YAAf,UAIE,cAAC,EAAD,CACAC,YAAaR,KAAKb,MAAMqB,YACxBF,WAAcN,KAAKM,WACnBD,eAAkBL,KAAKK,iBAGvB,cAAC,EAAD,CACAoC,QAAWzC,KAAKb,MAAMsD,QACtBE,SAAY3C,KAAKb,MAAMwD,SACvBD,YAAe1C,KAAK0C,YACpBL,WAAcrC,KAAKqC,aAGnB,cAAC,EAAD,CACAf,iBAAkByC,EAClBtC,kBAAmBzB,KAAKyB,kBACxBI,WAAc7B,KAAK6B,4B,GAlJjBT,aCCHmD,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBtB,MAAK,YAAkD,IAA/CuB,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,O,YCMdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.de00403e.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\n\r\nimport {FaPlus} from 'react-icons/fa';\r\n\r\nclass AddAppointments extends Component {\r\n\r\n    constructor(){\r\n        super();\r\n\r\n        // these are the user input values in the form\r\n        this.state = {\r\n            petName: '', \r\n            ownerName: '',\r\n            aptDate: '',\r\n            aptTime: '',\r\n            aptNotes: '', \r\n        }\r\n\r\n        this.handleChange = this.handleChange.bind(this);\r\n        this.handleSubmit = this.handleSubmit.bind(this);\r\n    }\r\n\r\n    // everytime a user input somethis, this function handles the change\r\n    handleChange(e){\r\n        const target = e.target;\r\n        const value = target.value;\r\n        const name = target.name;\r\n\r\n        this.setState({\r\n            [name]: value\r\n        });\r\n    }\r\n\r\n    handleSubmit(e){\r\n        e.preventDefault();\r\n        const temp = {\r\n            petName: this.state.petName, \r\n            ownerName: this.state.ownerName,\r\n            aptDate: this.state.aptDate + \" \" + this.state.aptTime,\r\n            aptNotes: this.state.aptNotes,\r\n        }\r\n\r\n        if(!temp.petName ===\"\" && !temp.ownerName ===\"\" && !temp.aptDate ===\"\"){\r\n            this.props.addAppointment(temp);\r\n        }\r\n\r\n        this.setState({\r\n            petName: '', \r\n            ownerName: '',\r\n            aptDate: '',\r\n            aptTime: '',\r\n            aptNotes: '', \r\n        });\r\n\r\n        this.props.toggleForm();\r\n\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className= {\r\n                \"card textcenter mt-3 \" + \r\n                (this.props.formDisplay ? \"\" : \"add-appointment\")\r\n            }>\r\n                <div className=\"apt-addheading card-header bg-primary text-white\" onClick={this.props.toggleForm}>\r\n                    <FaPlus /> Add Appointment\r\n                </div>\r\n\r\n                <div className=\"card-body\">\r\n                    <form id=\"aptForm\" noValidate onSubmit = {this.handleSubmit}>\r\n                        <div className=\"form-group form-row\">\r\n                            <label\r\n                                className=\"col-md-2 col-form-label text-md-right\"\r\n                                htmlFor=\"petName\"\r\n                                readOnly\r\n                            >\r\n                                Pet Name\r\n                            </label>\r\n                            <div className=\"col-md-10\">\r\n                                <input\r\n                                    type=\"text\"\r\n                                    className=\"form-control\"\r\n                                    name=\"petName\"\r\n                                    placeholder=\"Pet's Name\"\r\n                                    value = {this.state.petName}    // value of the input field\r\n                                    onChange = {this.handleChange}  // handles when the user changes the value \r\n                                />\r\n                            </div>\r\n                        </div>\r\n\r\n                        <div className=\"form-group form-row\">\r\n                            <label\r\n                                className=\"col-md-2 col-form-label text-md-right\"\r\n                                htmlFor=\"ownerName\"\r\n                            >\r\n                                Pet Owner\r\n                            </label>\r\n                            <div className=\"col-md-10\">\r\n                                <input\r\n                                    type=\"text\"\r\n                                    className=\"form-control\"\r\n                                    name=\"ownerName\"\r\n                                    placeholder=\"Owner's Name\"\r\n                                    value = {this.state.ownerName}\r\n                                    onChange = {this.handleChange}\r\n                                />\r\n                            </div>\r\n                        </div>\r\n\r\n                        <div className=\"form-group form-row\">\r\n                            <label\r\n                                className=\"col-md-2 col-form-label text-md-right\"\r\n                                htmlFor=\"aptDate\"\r\n                            >\r\n                                Date\r\n                            </label>\r\n                            <div className=\"col-md-4\">\r\n                                <input\r\n                                    type=\"date\"\r\n                                    className=\"form-control\"\r\n                                    name=\"aptDate\"\r\n                                    id=\"aptDate\"\r\n                                    value = {this.state.aptDate}\r\n                                    onChange = {this.handleChange}\r\n                                />\r\n                            </div>\r\n                            <label\r\n                                className=\"col-md-2 col-form-label text-md-right\"\r\n                                htmlFor=\"aptTime\"\r\n                            >\r\n                                Time\r\n                            </label>\r\n                            <div className=\"col-md-4\">\r\n                                <input\r\n                                    type=\"time\"\r\n                                    className=\"form-control\"\r\n                                    name=\"aptTime\"\r\n                                    id=\"aptTime\"\r\n                                    value = {this.state.aptTime}\r\n                                    onChange = {this.handleChange}\r\n                                />\r\n                            </div>\r\n                        </div>\r\n\r\n                        <div className=\"form-group form-row\">\r\n                            <label className=\"col-md-2 text-md-right\" htmlFor=\"aptNotes\">\r\n                                Apt. Notes\r\n                            </label>\r\n                            <div className=\"col-md-10\">\r\n                                <textarea\r\n                                    className=\"form-control\"\r\n                                    rows=\"4\"\r\n                                    cols=\"50\"\r\n                                    name=\"aptNotes\"\r\n                                    id=\"aptNotes\"\r\n                                    placeholder=\"Appointment Notes\"\r\n                                    value = {this.state.aptNotes}\r\n                                    onChange = {this.handleChange}\r\n                                />\r\n                            </div>\r\n                        </div>\r\n\r\n                        <div className=\"form-group form-row mb-0\">\r\n                            <div className=\"offset-md-2 col-md-10\">\r\n                                <button\r\n                                    type=\"submit\"\r\n                                    className=\"btn btn-primary d-block ml-auto\"\r\n                                >\r\n                                    Add Appointment\r\n                                </button>\r\n                            </div>\r\n                        </div>\r\n                    </form>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n\r\n}\r\n\r\nexport default AddAppointments;","import React, { Component } from 'react';\r\nimport Moment from 'react-moment';\r\nimport {FaTimes} from 'react-icons/fa';\r\n\r\nclass ListAppointments extends Component {\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"appointment-list item-list mb-3\">\r\n                {/* We need to loop over the array and display each name one by one */}\r\n                {this.props.appointmentNames.map(item => (      // works like a render function\r\n                    <div className=\"pet-item col media py-3\" key = {item.aptId}>\r\n                        <div className=\"mr-3\">\r\n                            <button className=\"pet-delete btn btn-sm btn-danger\" \r\n                                    onClick = {() => this.props.deleteAppointment(item)}>  \r\n                                    {/*returns a new array without that item. That is why an arrow function*/} \r\n                                <FaTimes /> {/*fancy icon*/}\r\n                            </button>\r\n                        </div>\r\n\r\n                        <div className=\"pet-info media-body\">\r\n                            <div className=\"pet-head d-flex\">\r\n                                <span \r\n                                className=\"pet-name\"\r\n                                contentEditable // allows html to update info\r\n                                suppressContentEditableWarning // suppress all the warnings that react creates because it is not used to change stuff from DOM\r\n                                onBlur = {e => this.props.updateInfo('petName', e.target.innerText, item.aptId )} // changes the current value\r\n                                >{item.petName}</span>\r\n                                <span className=\"apt-date ml-auto\">\r\n                                    <Moment  // for the date and time appearance  \r\n                                        // below are the required props\r\n                                        date = {item.aptDate}   // date to display\r\n                                        parse = 'YYYY-MM-DD hh:mm'  // format the date and time is coming in\r\n                                        format = 'MMM-D h:mma'      // format to display the date and time\r\n                                    />\r\n                                </span>\r\n                            </div>\r\n\r\n                            <div className=\"owner-name\">\r\n                                <span className=\"label-item\">Owner: </span>\r\n                                <span\r\n                                contentEditable // allows html to update info\r\n                                suppressContentEditableWarning // suppress all the warnings that react creates because it is not used to change stuff from DOM\r\n                                onBlur = {e => this.props.updateInfo('ownerInfo', e.target.innerText, item.aptId )} // changes the current value\r\n                                >{item.ownerName}</span>\r\n                            </div>\r\n                            <div className=\"apt-notes\"\r\n                            contentEditable // allows html to update info\r\n                            suppressContentEditableWarning // suppress all the warnings that react creates because it is not used to change stuff from DOM\r\n                            onBlur = {e => this.props.updateInfo('aptNotes', e.target.innerText, item.aptId )} // changes the current value\r\n                            >{item.aptNotes}</div>\r\n                        </div>\r\n                    </div>\r\n                ))}\r\n\r\n            </div>\r\n        );\r\n    }\r\n\r\n}\r\n\r\nexport default ListAppointments;","import React, { Component } from 'react';\r\n\r\nclass SearchAppointments extends Component {\r\n\r\n    render() {\r\n        return (\r\n\r\n            <div className=\"search-appointments row justify-content-center my-4\">\r\n                <div className=\"col-md-6\">\r\n                    <div className=\"input-group\">\r\n                        <input\r\n                            id=\"SearchApts\"\r\n                            type=\"text\"\r\n                            className=\"form-control\"\r\n                            aria-label=\"Search Appointments\"\r\n                            onChange = {e => this.props.searchApts(e.target.value)}\r\n                        />\r\n                        <div className=\"input-group-append\">\r\n                            <button\r\n                                type=\"button\"\r\n                                className=\"btn btn-primary dropdown-toggle\"\r\n                                data-toggle=\"dropdown\"\r\n                                aria-haspopup=\"true\"\r\n                                aria-expanded=\"false\"\r\n                            >\r\n                                Sort by: <span className=\"caret\" />\r\n                            </button>\r\n\r\n                            <div className=\"sort-menu dropdown-menu dropdown-menu-right\">\r\n                                <button className={\r\n                                    \"sort-by dropdown-item \" +\r\n                                    (this.props.orderBy === 'petName' ? 'active' : '') \r\n                                } \r\n                                onClick = {(e) => this.props.changeOrder('petName', this.props.orderDir)} // sends back the prop after the user click on the menu option\r\n                                href=\"#\">\r\n                                    Pet Name\r\n                                </button>\r\n                                <button className={\r\n                                    \"sort-by dropdown-item \" +\r\n                                    (this.props.orderBy === 'aptDate' ? 'active' : '') \r\n                                } \r\n                                onClick = {(e) => this.props.changeOrder('aptDate', this.props.orderDir)}\r\n                                href=\"#\">\r\n                                    Date\r\n                                </button>\r\n                                <button className={\r\n                                    \"sort-by dropdown-item \" +\r\n                                    (this.props.orderBy === 'ownerName' ? 'active' : '') \r\n                                } \r\n                                onClick = {(e) => this.props.changeOrder('ownerName', this.props.orderDir)}\r\n                                href=\"#\">\r\n                                    Owner\r\n                                </button>\r\n                                <div role=\"separator\" className=\"dropdown-divider\" />\r\n                                <button className={\r\n                                    \"sort-by dropdown-item \" +\r\n                                    (this.props.orderDir === 'asc' ? 'active' : '') \r\n                                }\r\n                                onClick = {(e) => this.props.changeOrder(this.props.orderBy, 'asc')}\r\n                                href=\"#\">\r\n                                    Asc\r\n                                </button>\r\n                                <button className={\r\n                                    \"sort-by dropdown-item \" +\r\n                                    (this.props.orderDir === 'desc' ? 'active' : '') \r\n                                } \r\n                                onClick = {(e) => this.props.changeOrder(this.props.orderBy, 'desc')}\r\n                                href=\"#\">\r\n                                    Desc\r\n                                </button>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n\r\n        );\r\n    }\r\n\r\n}\r\n\r\nexport default SearchAppointments;","// npm i -s bootstrap react-icons lodash jquery popper.js moment react-moment\n// i is for install and -s is to save them as project's dependencies \n\nimport React, { Component } from 'react';\nimport '../css/App.css';\nimport AddAppointments from './AddAppointments';\nimport ListAppointments from './ListAppointments';\nimport SearchAppointments from './SearchAppointments';\n\nimport { without, findIndex } from 'lodash'; // returns a new array after removing an item from the array\n\nclass App extends Component {\n\n  constructor() {\n    super(); // it is required so that we can use 'this' keyword and access things from the component class.\n\n    // this.state intializes an object\n    // The state property can be really powerful as if any component is using a state and for some reason that state changes, \n    // react automatically redraws the component that is using that state.\n\n    this.state = {\n      //myName: 'Shrey' \n      appointments: [],\n      orderBy: 'petName',\n      orderDir: 'asc',\n      formDisplay: false, // to display the form\n      queryText: '', // for the search\n      lastIndex: 0 // key for each index in the appointment array\n    }\n\n    // bind 'this' to delete appointment otherwise 'this' will not work in the method \n    this.deleteAppointment = this.deleteAppointment.bind(this); \n    this.toggleForm = this.toggleForm.bind(this);\n    this.addAppointment = this.addAppointment.bind(this);\n    this.changeOrder = this.changeOrder.bind(this);\n    this.searchApts = this.searchApts.bind(this);\n    this.updateInfo = this.updateInfo.bind(this);\n  }\n\n  // a lifecycle method\n  // it will be used for fetching data from the json file in public folder immediately after the component is mounted \n  componentDidMount() {\n    fetch('./data.json') // we use './' even if the files are not in same directory because once the prpoject compiles all the files are in same directory\n      .then(response => response.json()) // converts the response in json object\n      .then(result => {\n        const apt = result.map(item => {\n          item.aptId = this.state.lastIndex;  // this is used to give each index in the array a unique key\n          this.setState({ lastIndex: this.state.lastIndex + 1 });\n          return item;\n        })\n        this.setState({ appointments: apt }); // the result variable holds all the data and we will set the state to it\n      });\n  }\n\n  // for searching the appointments\n  searchApts(query){\n    this.setState({queryText: query});\n  }\n\n  // a function to make the sortBy button work\n  changeOrder(order, dir){\n    this.setState({\n      orderBy: order,\n      orderDir: dir\n    });\n  }\n\n  // adds a new appointment to the appointments array after the submitting \n  addAppointment(apt){\n    const temp = this.state.appointments;\n    apt.aptId = this.state.lastIndex;\n    temp.unshift(apt);\n\n    this.setState({\n      appointments: temp,\n      lastIndex: this.state.lastIndex + 1\n    });\n\n  }\n\n  // display the form after clicking on the heading\n  toggleForm(){\n    this.setState({\n      formDisplay: !this.state.formDisplay\n    })\n  }\n\n  updateInfo(fieldName, value, id){\n    let temp = this.state.appointments;\n    let aptIndex = findIndex(this.state.appointments, {aptId: id});\n    temp[aptIndex][fieldName] = value;\n\n    this.setState({\n      appointments: temp\n    });\n  }\n\n  // deletes the appointment\n  deleteAppointment(apt){\n    let temp = this.state.appointments;\n    temp = without(temp, apt);\n    this.setState({appointments: temp})\n  }\n\n  render() {\n\n    // creates a variable to hold state\n    let order;\n    let filteredApts = this.state.appointments;\n\n    // initialize order\n    if(this.state.orderDir === 'asc'){\n      order = 1;\n    }else{\n      order = -1;\n    }\n\n    // sort the appointments\n    filteredApts = filteredApts.sort((a,b) => { // since it is a higher order function, it can't modify array directy. That's why we add 'filteredApts =' in the front\n      if(a[this.state.orderBy].toLowerCase() < b[this.state.orderBy].toLowerCase()){\n        return -1 * order; // multiplies by order help to arrange it according to the direction (asc, desc)\n      }else{\n        return 1 * order;\n      }\n    }).filter(eachItem => {     // filters each item according to the search query  \n      return (\n        eachItem['petName'].toLowerCase().includes(this.state.queryText.toLowerCase()) || \n        eachItem['ownerName'].toLowerCase().includes(this.state.queryText.toLowerCase()) || \n        eachItem['aptNotes'].toLowerCase().includes(this.state.queryText.toLowerCase()) \n      );\n    });\n\n    return (\n      <main className=\"page bg-white\" id=\"petratings\">\n        <div className=\"container\">\n          <div className=\"row\">\n            <div className=\"col-md-12 bg-white\">\n              <div className=\"container\">\n\n                {/* {this.state.myName} is to access that state and display on the browser*/}\n\n                <AddAppointments \n                formDisplay={this.state.formDisplay} \n                toggleForm = {this.toggleForm} \n                addAppointment = {this.addAppointment} \n                />\n                \n                <SearchAppointments \n                orderBy = {this.state.orderBy} \n                orderDir = {this.state.orderDir} \n                changeOrder = {this.changeOrder}\n                searchApts = {this.searchApts}\n                />\n\n                <ListAppointments \n                appointmentNames={filteredApts} \n                deleteAppointment={this.deleteAppointment} \n                updateInfo = {this.updateInfo}\n                />\n              </div>\n            </div>\n          </div>\n        </div>\n      </main>\n    );\n  }\n\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.css';\nimport './css/index.css';\nimport App from './components/App';\nimport reportWebVitals from './reportWebVitals';\nimport 'jquery/dist/jquery.js';\nimport 'popper.js/dist/umd/popper.js';\nimport 'bootstrap/dist/js/bootstrap.js';\n\n// bootstarp is a responsive mobile first freamework and it uses libraries like popper.js and jquery\n//we are importing them here because they affect the whole app \n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}